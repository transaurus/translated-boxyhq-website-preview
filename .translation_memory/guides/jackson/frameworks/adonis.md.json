{
  "source_file_path_relative_to_docusaurus_root": "guides/jackson/frameworks/adonis.md",
  "source_file_content_hash": "bd88f54b1332681a9bb4c492bdc712f4629e5899a8cb01e95bfe19f2d9862d27",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: Add SAML SSO to AdonisJS App with BoxyHQ\ndescription: Add SAML SSO to AdonisJS App with BoxyHQ\nsidebar_label: AdonisJS\n---",
      "source_content_hash": "60cf59c7b988ba318d58da26e7965b8d18c97d25f8b31c1bcb900850c962f373",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "10c4cb47",
      "source_content": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';",
      "source_content_hash": "86702643a5c3bdf74257ff6062535897129ed9144c4f5b70edfe338fef3e5c73",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_10c4cb47"
      }
    },
    {
      "segment_id": "1cc03ec8",
      "source_content": "# Add SAML SSO to AdonisJS App",
      "source_content_hash": "4fb2a734b044ce8809fa99388910c535e762137cb79bc83f6cbc216a90794c22",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "# 为AdonisJS应用集成SAML单点登录"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "This guide assumes that you have a AdonisJS app and want to enable SAML Single Sign-On authentication for your enterprise customers. By the end of this guide, you'll have an app that allows you to authenticate the users using SAML Single Sign-On.",
      "source_content_hash": "36538ca39ffaddd60317e4a997a8c71aa8dd71eabbae5896f051d9af24371122",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "本指南假设您已拥有一个AdonisJS应用，并希望为企业客户启用SAML单点登录认证。完成本指南后，您的应用将能够通过SAML单点登录对用户进行身份验证。"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "Visit the [GitHub repository](https://github.com/boxyhq/jackson-examples/tree/main/apps/adonisjs) to see the source code for the AdonisJS SAML SSO integration.",
      "source_content_hash": "eace61af0fc0a9fecf0f5e1995ea3a22a28267606b7bc668cbcc031bd9928e84",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "访问[GitHub代码库](https://github.com/boxyhq/jackson-examples/tree/main/apps/adonisjs)查看AdonisJS集成SAML单点登录的源代码。"
      }
    },
    {
      "segment_id": "86b54d44",
      "source_content": "Integrating SAML SSO into an app involves the following steps.",
      "source_content_hash": "b41d0c741a2a4a57f2f8fab371dffbd39dc33a404f97c74b706f4e166b827a0d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "为应用集成SAML单点登录包含以下步骤："
      }
    },
    {
      "segment_id": "11c829ab",
      "source_content": "- Configure SAML Single Sign-On\n- Authenticate with SAML Single Sign-On",
      "source_content_hash": "bc65b0d357e9559034fbd9763bb9510bb34ac402187fc17447e5e97d7258d38e",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 配置SAML单点登录\n- 通过SAML单点登录进行认证"
      }
    },
    {
      "segment_id": "418617bd",
      "source_content": "## Configure SAML Single Sign-On",
      "source_content_hash": "680e424938b66ff2cb309ca1f6c9211de5a6b470399378248e3e36eb698a42f6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 配置SAML单点登录"
      }
    },
    {
      "segment_id": "2fdadb08",
      "source_content": "This step allows your tenants to configure SAML connections for their users. Read the following guides to understand more about this.",
      "source_content_hash": "44570eec6f1685f46ec726135e0ef1456876caf09b8afa825586b7f20c3776a4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "此步骤允许您的租户为其用户配置SAML连接。阅读以下指南以了解更多："
      }
    },
    {
      "segment_id": "44d89370",
      "source_content": "- [UI Best Practices for Configuring SAML Single Sign-On](/guides/jackson/configuring-saml-sso)\n- [SSO Connection API](/docs/jackson/sso-flow/)",
      "source_content_hash": "088ba8b656d2059418e53604b3eba9e3f53a5c366eed28d0cbbe52042b6b3562",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- [配置SAML单点登录的UI最佳实践](/guides/jackson/configuring-saml-sso)\n- [SSO连接API文档](/docs/jackson/sso-flow/)"
      }
    },
    {
      "segment_id": "3c36424c",
      "source_content": "## Authenticate with SAML Single Sign-On",
      "source_content_hash": "beaad64d7ce66f37bfb7d59b009777c5c9085f0353a91b1fc2650dc70a7345bb",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 通过SAML单点登录进行认证"
      }
    },
    {
      "segment_id": "26524352",
      "source_content": "Once you add a SAML connection, the app can use this SAML connection to initiate the SSO authentication flow using SAML Jackson. The following sections focus more on the SSO authentication side.",
      "source_content_hash": "fc68bfce93d6cc7f2c605992f3e55f423b3bbf0dd231b9da91e6a1ce02758c7d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "添加SAML连接后，应用可使用该连接通过SAML Jackson发起SSO认证流程。以下部分将重点介绍SSO认证环节。"
      }
    },
    {
      "segment_id": "b25f21be",
      "source_content": "### Install SAML Jackson",
      "source_content_hash": "649737b1a6678e52262ba416d8356f38e9b902683dab3eb0ac35677a3ce74499",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 安装SAML Jackson"
      }
    },
    {
      "segment_id": "7499a4e7",
      "source_content": "To get started with SAML Jackson, use the Node Package Manager to add the package to your project's dependencies.",
      "source_content_hash": "04489a1d8702cca5b2840eea2117cd881368451c50ceaa6a1f7fc05c01b1dae4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "要开始使用SAML Jackson，请通过Node包管理器将该包添加至项目依赖。"
      }
    },
    {
      "segment_id": "076d64d1",
      "source_content": "```bash\nnpm i --save @boxyhq/saml-jackson\n```",
      "source_content_hash": "812541629967c649211aa86e10cd476b3ac843eaf54089dade89546d0e3b3b9a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_076d64d1"
      }
    },
    {
      "segment_id": "782c902a",
      "source_content": "### Setup SAML Jackson",
      "source_content_hash": "8dbe0621d592d23bc26b14e5d3d03a40b35ff72223b1a4ea44f54251a3574187",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 配置SAML Jackson"
      }
    },
    {
      "segment_id": "50746522",
      "source_content": "Setup the SAML Jackson to work with AdonisJS app.",
      "source_content_hash": "ca3cbf0eb21df5195c0e3c36df8a406e3ef5beeaa7f6c9f7463b7178a363b3fd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "配置SAML Jackson以适配AdonisJS应用。"
      }
    },
    {
      "segment_id": "45022e4f",
      "source_content": "```js title=\"lib/jackson.ts\"\nimport { type JacksonOption } from '@boxyhq/saml-jackson';\n\nexport const appUrl = 'https://your-app.com';\nexport const samlAudience = 'https://saml.boxyhq.com';\nexport const redirectUrl = `${appUrl}/sso/callback`;\n\nexport const options: JacksonOption = {\n  externalUrl: appUrl,\n  samlAudience,\n  samlPath: '/sso/acs',\n  db: {\n    engine: 'sql',\n    type: 'postgres',\n    url: 'postgres://postgres:postgres@localhost:5432/postgres',\n  },\n};\n```",
      "source_content_hash": "3bb92bf61e4ddef66c77b71687d971026de2b6ad91c3201de46607a6aed5089a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_45022e4f"
      }
    },
    {
      "segment_id": "8b2a52b1",
      "source_content": "`samlPath` is where the identity provider POST the SAML response after authenticating the user and `redirectUrl` is where the SAML Jackson redirects the user after authentication.",
      "source_content_hash": "65f32f876645dea9a7b451fc8c608c995ea74e9bdb628896d9f75437af167f9f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`samlPath`是身份提供商在用户认证后提交SAML响应的端点，`redirectUrl`是SAML Jackson在认证完成后重定向用户的地址。"
      }
    },
    {
      "segment_id": "5dae11e3",
      "source_content": "Create a new custom Provider `JacksonProvider` that relies on the `@boxyhq/saml-jackson`. The `boot` method initializes the SAML Jackson and returns a singleton.",
      "source_content_hash": "1421c4e8433615561e5e2188e1079e5b3db8bde89115a487122054eaef4f024a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "创建一个名为`JacksonProvider`的自定义Provider，该Provider依赖于`@boxyhq/saml-jackson`。其`boot`方法将初始化SAML Jackson并返回单例实例。"
      }
    },
    {
      "segment_id": "1d510af2",
      "source_content": "```js title=\"providers/JacksonProvider.ts\"\nimport type { ApplicationContract } from '@ioc:Adonis/Core/Application';\n\nimport { options } from '../lib/jackson';\n\nexport default class JacksonProvider {\n  constructor(protected app: ApplicationContract) {}\n\n  public async boot() {\n    const jackson = await require('@boxyhq/saml-jackson').default(options);\n\n    this.app.container.singleton('BoxyHQ/Jackson', () => {\n      const { connectionAPIController, oauthController } = jackson;\n\n      return {\n        connectionAPIController,\n        oauthController,\n      };\n    });\n  }\n\n  public register() {\n    // Register your own bindings\n  }\n\n  public async ready() {\n    // App is ready\n  }\n\n  public async shutdown() {\n    // Cleanup, since app is going down\n  }\n}\n```",
      "source_content_hash": "3899bb9176ad97eb4480984d9ca09614d4748e5d44c4ba6504bf1e25eadd7f91",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_1d510af2"
      }
    },
    {
      "segment_id": "6ca4479f",
      "source_content": "Create a declaration file if you are working with TypeScript.",
      "source_content_hash": "0e1f9fd9c0e8f7334952f878a9802df32287c46904d33e594c8d70544bfe5399",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若使用TypeScript开发，需创建声明文件。"
      }
    },
    {
      "segment_id": "1cf51900",
      "source_content": "```js title=\"contracts/jackson.ts\"\ndeclare module '@ioc:BoxyHQ/Jackson' {\n  import { type IOAuthController, type IConnectionAPIController } from '@boxyhq/saml-jackson';\n\n  export const connectionAPIController: IConnectionAPIController;\n  export const oauthController: IOAuthController;\n}\n```",
      "source_content_hash": "d1ed65fcfeafff5555f91681382fce611c8b58500ba29155b1bfff3a7579bfeb",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_1cf51900"
      }
    },
    {
      "segment_id": "8574d51c",
      "source_content": "### Make Authentication Request",
      "source_content_hash": "183248edcdad61d66651eee6f50bd53b3e36cb15c69d07c5b5f5cb3ef9d59611",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 发起认证请求"
      }
    },
    {
      "segment_id": "e9313fef",
      "source_content": "Let's add a route to begin the authenticate flow; this route initiates the SAML SSO flow by redirecting the users to their configured Identity Provider.",
      "source_content_hash": "9f1a5a74765e0342025b8d3abead331db85a4586cd51c6fc90a1dec8fa6e055e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "添加路由以启动认证流程：该路由通过将用户重定向至其配置的身份提供商来发起SAML SSO流程。"
      }
    },
    {
      "segment_id": "342e4d80",
      "source_content": "```js title=\"start/routes.ts\"\nimport LoginController from 'App/Controllers/Http/LoginController';\n\nRoute.post('/login', async (ctx) => {\n  return new LoginController().store(ctx);\n});\n```",
      "source_content_hash": "98f9c2f9c0e2677f7214eb73ea315bc35ac92f5c68983ade443897bdd435e1b6",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_342e4d80"
      }
    },
    {
      "segment_id": "b6152880",
      "source_content": "The `store` method of `LoginController` takes care of redirecting the user to the Identity Provider.",
      "source_content_hash": "df7a69c56f1ea1fea6ab0f52aaedf78e35b50679414cccfa763a58d69ab2780a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`LoginController`的`store`方法负责将用户重定向至身份提供商。"
      }
    },
    {
      "segment_id": "a80fd598",
      "source_content": "<Tabs>\n<TabItem value=\"01\" label=\"With Tenant and Product\" default>\n\n```js title=\"app/Controllers/Http/LoginController.ts\"\nimport type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext';\n\nimport { oauthController } from '@ioc:BoxyHQ/Jackson';\nimport { type OAuthReq } from '@boxyhq/saml-jackson';\nimport { redirectUrl } from '../../../lib/jackson';\n\nexport default class LoginController {\n  public async store({ request, response }: HttpContextContract) {\n    const tenant = 'boxyhq.com'; // The user's tenant\n    const product = 'saml-demo.boxyhq.com'; // Your app or product name\n    const state = 'a-random-state-value'; // You can use the `state` parameter to restore application state between redirects.\n\n    const { redirect_url } = await oauthController.authorize({\n      tenant,\n      product,\n      state,\n      redirect_uri: redirectUrl,\n    } as OAuthReq);\n\n    return response.redirect(redirect_url as string);\n  }\n}\n```\n\n</TabItem>\n\n<TabItem value=\"02\" label=\"With Client ID\">\n\n```js title=\"app/Controllers/Http/LoginController.ts\"\nimport type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext';\n\nimport { oauthController } from '@ioc:BoxyHQ/Jackson';\nimport { type OAuthReq } from '@boxyhq/saml-jackson';\nimport { redirectUrl } from '../../../lib/jackson';\n\nexport default class LoginController {\n  public async store({ request, response }: HttpContextContract) {\n    const clientId = '123456789'; // The tenant's client ID\n\n    const { redirect_url } = await oauthController.authorize({\n      client_id: clientId,\n      state: 'a-random-state-value', // You can use the `state` parameter to restore application state between redirects.\n      redirect_uri: redirectUrl,\n    } as OAuthReq);\n\n    return response.redirect(redirect_url as string);\n  }\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "08aba9e57f152f5c39a1f0de9cddd7d9c55689291b55475d94b25050a40889fa",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_a80fd598"
      }
    },
    {
      "segment_id": "1297ec42",
      "source_content": "### Receives SAML Response",
      "source_content_hash": "912543b3a2cadb8fbe7efd3eaf46ead5479703a4751c9f002fc73bc2b7e11e1e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 接收SAML响应"
      }
    },
    {
      "segment_id": "c8a6ab3e",
      "source_content": "After successful authentication, Identity Provider POST the SAML response to the Assertion Consumer Service (ACS) URL.",
      "source_content_hash": "0f016308541eb26f22085f0c41690fd5a0187723fc099aa59b0b395be0c83db2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "认证成功后，身份提供商将SAML响应POST至断言消费者服务(ACS)URL。"
      }
    },
    {
      "segment_id": "5cf1bce4",
      "source_content": "Let's add a route to handle the SAML response. Ensure the route matches the value of the `samlPath` you configured while initializing the SAML Jackson library and should be able to receives POST request.",
      "source_content_hash": "caecd06d8dffbcaa8350297eaa52555518916b5bde96b2235660a5a0f4b11824",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "添加路由以处理SAML响应。确保该路由与初始化SAML Jackson库时配置的`samlPath`值匹配，且能够接收POST请求。"
      }
    },
    {
      "segment_id": "d7c0a6db",
      "source_content": "```js title=\"start/routes.ts\"\nimport SSOController from 'App/Controllers/Http/SSOController';\n\nRoute.post('/sso/acs', async (ctx) => {\n  return new SSOController().acs(ctx);\n});\n```",
      "source_content_hash": "8b8fab3986f5a00eba99e13a19bdfdd8b09723f43e1a61175eb494bdd791aba5",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_d7c0a6db"
      }
    },
    {
      "segment_id": "3799844b",
      "source_content": "The `acs` method of `SSOController` takes care of handling the SAML response from the Identity Provider and redirecting the users to the `redirectUrl`.",
      "source_content_hash": "88fb4ed8341c10855c8064219b7ac5e47899425ac3100af2ed3af6f5f3023f84",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`SSOController`的`acs`方法负责处理来自身份提供商的SAML响应，并将用户重定向至`redirectUrl`。"
      }
    },
    {
      "segment_id": "ec2ce541",
      "source_content": "```js title=\"app/Controllers/Http/SSOController.ts\"\nimport type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext';\n\nimport { oauthController } from '@ioc:BoxyHQ/Jackson';\n\nexport default class SSOController {\n  public async acs({ request, response }: HttpContextContract) {\n    const relayState = request.input('RelayState');\n    const samlResponse = request.input('SAMLResponse');\n\n    const { redirect_url } = await oauthController.samlResponse({\n      RelayState: relayState,\n      SAMLResponse: samlResponse,\n    });\n\n    return response.redirect(redirect_url as string);\n  }\n}\n```",
      "source_content_hash": "b96ca49966b85e8455e582259341a72b1a85f554f85099734e3e2b3efee4f928",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_ec2ce541"
      }
    },
    {
      "segment_id": "dc825187",
      "source_content": "### Request Access Token",
      "source_content_hash": "61c0c6a2ba0c4a1c52c6019a99c59ebd8e61cb9992ba14a109cf9475d4667001",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 请求访问令牌"
      }
    },
    {
      "segment_id": "833ce577",
      "source_content": "Let's add another route for receiving the callback after the authentication. Ensure the route matches the value of the `redirectUrl` you configured previously.",
      "source_content_hash": "6c3afe707543704766f2d5a0d45eacb67d6eb2c7d447d0066cb7de2c224cd213",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "添加另一个路由用于接收认证完成后的回调。确保该路由与先前配置的`redirectUrl`值匹配。"
      }
    },
    {
      "segment_id": "3d4d9546",
      "source_content": "```js title=\"apps/adonisjs/start/routes.ts\"\nimport SSOController from 'App/Controllers/Http/SSOController';\n\nRoute.get('/sso/callback', async (ctx) => {\n  return new SSOController().callback(ctx);\n});\n```",
      "source_content_hash": "1e2954db01a3a4be811eedd24585bef3ae2759fcda783e7ba394206f32953e7c",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_3d4d9546"
      }
    },
    {
      "segment_id": "228d01d5",
      "source_content": "The application requests an `access_token` by passing the authorization `code` along with authentication details, including the `client_id`, `client_secret`, and `redirect_uri`.",
      "source_content_hash": "4af0b6627b5f2d80ebae6dea0c7f543c2905faffb309b382dd07f8a01fc907cf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "应用通过传递授权`code`及包含`client_id`、`client_secret`和`redirect_uri`的认证详情来请求`access_token`。"
      }
    },
    {
      "segment_id": "85b17c36",
      "source_content": "The `callback` method of `SSOController` take care of this.",
      "source_content_hash": "ab237955f7e03e1a5ade6c18c290132acbb61fc60262e322d8c53cd3b9b708df",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`SSOController`的`callback`方法负责此流程。"
      }
    },
    {
      "segment_id": "de60fdf8",
      "source_content": "<Tabs>\n<TabItem value=\"01\" label=\"With Tenant and Product\" default>\n\n```js title=\"app/Controllers/Http/SSOController.ts\"\nimport type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext';\n\nimport { oauthController } from '@ioc:BoxyHQ/Jackson';\nimport { type OAuthTokenReqWithCredentials } from '@boxyhq/saml-jackson';\nimport { redirectUrl } from '../../../lib/jackson';\n\nexport default class SSOController {\n  public async callback({ request, response, auth }: HttpContextContract) {\n    const { code, state } = request.qs();\n\n    const tenant = 'boxyhq.com'; // The user's tenant\n    const product = 'saml-demo.boxyhq.com'; // Your app or product name\n\n    const clientId = `tenant=${tenant}&product=${product}`;\n    const clientSecret = 'dummy';\n\n    // Exchange the `code` for `access_token`\n    const { access_token } = await oauthController.token({\n      code,\n      client_id: clientId,\n      client_secret: clientSecret,\n      redirect_uri: redirectUrl,\n    } as OAuthTokenReqWithCredentials);\n  }\n}\n```\n\n</TabItem>\n\n<TabItem value=\"02\" label=\"With Client ID\">\n\n```js title=\"app/Controllers/Http/SSOController.ts\"\nimport type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext';\n\nimport { oauthController } from '@ioc:BoxyHQ/Jackson';\nimport { type OAuthTokenReqWithCredentials } from '@boxyhq/saml-jackson';\nimport { redirectUrl } from '../../../lib/jackson';\n\nexport default class SSOController {\n  public async callback({ request, response, auth }: HttpContextContract) {\n    const { code, state } = request.qs();\n\n    const clientId = '123456789'; // The tenant's client ID\n    const clientSecret = 'dUdSOmGoxr'; // The tenant's client Secret\n\n    // Exchange the `code` for `access_token`\n    const { access_token } = await oauthController.token({\n      code,\n      client_id: clientId,\n      client_secret: clientSecret,\n      redirect_uri: redirectUrl,\n    } as OAuthTokenReqWithCredentials);\n  }\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "310cbeb6cdd728fff2a582f1cf84683b11039f6295a315f83d432f7fbd52f85a",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_de60fdf8"
      }
    },
    {
      "segment_id": "295e85da",
      "source_content": "### Fetch User Profile",
      "source_content_hash": "0d72a4b900175fa6282dd8c47065fb455899ffcce076af4f0bc76a1efc02428f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 获取用户资料"
      }
    },
    {
      "segment_id": "a5a28988",
      "source_content": "Once the `access_token` has been fetched, you can use it to retrieve the user profile from the Identity Provider. The `userInfo` method returns a response containing the user profile if the authorization is valid.",
      "source_content_hash": "30919e133caceaf71f4f549bb4d026d999e95b13255dadc9f57003382030806e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "获取到 `access_token` 后，您可以用它从身份提供商处检索用户资料。若授权有效，`userInfo` 方法将返回包含用户资料的响应。"
      }
    },
    {
      "segment_id": "16758561",
      "source_content": "```js\nconst user = await oauthController.userInfo(access_token);\n```",
      "source_content_hash": "edf86f8f42674dafafb8d9fb260e0e1d7ff9b74235981e85d2960dd7d44c0f6c",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_16758561"
      }
    },
    {
      "segment_id": "130e2dfb",
      "source_content": "The entire response will look something like this:",
      "source_content_hash": "24c284ebbb7472c2f05e9a9ae60848133d4cf840ea0df484e4de99af4fed3c13",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "完整响应示例如下："
      }
    },
    {
      "segment_id": "fa163a68",
      "source_content": "```json\n{\n  \"id\":\"<id from the Identity Provider>\",\n  \"email\": \"jackson@coolstartup.com\",\n  \"firstName\": \"SAML\",\n  \"lastName\": \"Jackson\",\n  \"requested\": {\n    \"tenant\": \"<tenant>\",\n    \"product\": \"<product>\",\n    \"client_id\": \"<client_id>\",\n    \"state\": \"<state>\"\n  },\n  \"raw\": {\n    ...\n  }\n}\n```",
      "source_content_hash": "5aa1ce4635b3013ee315ac9ced87b396208cd8f8cec45142c40c58d9c33138cd",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_fa163a68"
      }
    },
    {
      "segment_id": "3d6aa925",
      "source_content": "### Authenticate User",
      "source_content_hash": "0d068b485e5f9269baec72bdc4311c36a12b3266c4a631444dfa62a23d6c8350",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 用户认证"
      }
    },
    {
      "segment_id": "b682f1ac",
      "source_content": "Once the user has been retrieved from the Identity Provider, you may determine if the user exists in your application and authenticate the user. If the user does not exist in your application, you will typically create a new record in your database to represent the user.",
      "source_content_hash": "a524473dc4cf8bceb72976ed06072a8c8da9a82f1bc67f4fb86a7d6c9648b1af",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "从身份提供商获取用户信息后，您可判断该用户是否存在于您的应用中并进行认证。若用户不存在，通常需要在数据库中创建新记录来存储该用户信息。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs-guides/current/jackson/frameworks/adonis.md",
  "last_updated_timestamp": "2025-06-10T09:18:27.292985+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "bd88f54b1332681a9bb4c492bdc712f4629e5899a8cb01e95bfe19f2d9862d27"
  }
}