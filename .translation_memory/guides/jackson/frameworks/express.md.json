{
  "source_file_path_relative_to_docusaurus_root": "guides/jackson/frameworks/express.md",
  "source_file_content_hash": "719d91706baa2ee18069388047a5ddb44e6587a5a95cdf8214a46c21a2b28d87",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: Add SAML SSO to Express.js App with BoxyHQ\ndescription: Add SAML SSO to Express.js App with BoxyHQ\nsidebar_label: Express.js\n---",
      "source_content_hash": "48c2c696322ceac240fea8cd73d1416c341242ce92751b410c33a6adc46652ce",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "10c4cb47",
      "source_content": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';",
      "source_content_hash": "86702643a5c3bdf74257ff6062535897129ed9144c4f5b70edfe338fef3e5c73",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_10c4cb47"
      }
    },
    {
      "segment_id": "1cc03ec8",
      "source_content": "# Add SAML SSO to Express.js App",
      "source_content_hash": "560089e3efb2b18b27a9e52253a1e045a06e1db8dad103302f14287e0f237c7b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "# 为Express.js应用添加SAML单点登录"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "This guide assumes that you have a Express.js app and want to enable SAML Single Sign-On authentication for your enterprise customers. By the end of this guide, you'll have an app that allows you to authenticate the users using SAML Single Sign-On.",
      "source_content_hash": "cd67efd3be18a3bd2ab7a041c2d7b1580ec1155388fd3095dda2fcb458e6bcf1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "本指南假设您已拥有一个Express.js应用，并希望为企业客户启用SAML单点登录认证。完成本指南后，您将获得一个支持通过SAML单点登录认证用户的应用。"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "Visit the [GitHub repository](https://github.com/boxyhq/jackson-examples/tree/main/apps/express) to see the source code for the Express.js SAML SSO integration.",
      "source_content_hash": "8cad4fa1b863d7f6facea00b732ca0844368437a92683ab6911535740df73c96",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "访问[GitHub代码库](https://github.com/boxyhq/jackson-examples/tree/main/apps/express)查看Express.js集成SAML单点登录的源代码。"
      }
    },
    {
      "segment_id": "86b54d44",
      "source_content": "Integrating SAML SSO into an app involves the following steps.",
      "source_content_hash": "b41d0c741a2a4a57f2f8fab371dffbd39dc33a404f97c74b706f4e166b827a0d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "为应用集成SAML单点登录需要完成以下步骤。"
      }
    },
    {
      "segment_id": "11c829ab",
      "source_content": "- Configure SAML Single Sign-On\n- Authenticate with SAML Single Sign-On",
      "source_content_hash": "bc65b0d357e9559034fbd9763bb9510bb34ac402187fc17447e5e97d7258d38e",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 配置SAML单点登录\n- 通过SAML单点登录进行认证"
      }
    },
    {
      "segment_id": "418617bd",
      "source_content": "## Configure SAML Single Sign-On",
      "source_content_hash": "680e424938b66ff2cb309ca1f6c9211de5a6b470399378248e3e36eb698a42f6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 配置SAML单点登录"
      }
    },
    {
      "segment_id": "2fdadb08",
      "source_content": "This step allows your tenants to configure SAML connections for their users. Read the following guides to understand more about this.",
      "source_content_hash": "44570eec6f1685f46ec726135e0ef1456876caf09b8afa825586b7f20c3776a4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "此步骤允许您的租户为其用户配置SAML连接。阅读以下指南以了解更多信息。"
      }
    },
    {
      "segment_id": "44d89370",
      "source_content": "- [UI Best Practices for Configuring SAML Single Sign-On](/guides/jackson/configuring-saml-sso)\n- [SSO Connection API](/docs/jackson/sso-flow/)",
      "source_content_hash": "088ba8b656d2059418e53604b3eba9e3f53a5c366eed28d0cbbe52042b6b3562",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- [配置SAML单点登录的UI最佳实践](/guides/jackson/configuring-saml-sso)\n- [SSO连接API](/docs/jackson/sso-flow/)"
      }
    },
    {
      "segment_id": "3c36424c",
      "source_content": "## Authenticate with SAML Single Sign-On",
      "source_content_hash": "beaad64d7ce66f37bfb7d59b009777c5c9085f0353a91b1fc2650dc70a7345bb",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 通过SAML单点登录进行认证"
      }
    },
    {
      "segment_id": "26524352",
      "source_content": "Once you add a SAML connection, the app can use this SAML connection to initiate the SSO authentication flow using SAML Jackson. The following sections focuses more on the SSO authentication side.",
      "source_content_hash": "2f4b485456de35e4e980509776724731fbdbd0405a3956ddd39198d70f6b551f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "添加SAML连接后，应用可使用该连接通过SAML Jackson发起SSO认证流程。以下部分将重点介绍SSO认证环节。"
      }
    },
    {
      "segment_id": "b25f21be",
      "source_content": "### Install SAML Jackson",
      "source_content_hash": "649737b1a6678e52262ba416d8356f38e9b902683dab3eb0ac35677a3ce74499",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 安装SAML Jackson"
      }
    },
    {
      "segment_id": "7499a4e7",
      "source_content": "To get started with SAML Jackson, use the Node Package Manager to add the package to your project's dependencies.",
      "source_content_hash": "04489a1d8702cca5b2840eea2117cd881368451c50ceaa6a1f7fc05c01b1dae4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "要开始使用SAML Jackson，请通过Node包管理器将该包添加至项目依赖。"
      }
    },
    {
      "segment_id": "076d64d1",
      "source_content": "```bash\nnpm i --save @boxyhq/saml-jackson\n```",
      "source_content_hash": "812541629967c649211aa86e10cd476b3ac843eaf54089dade89546d0e3b3b9a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_076d64d1"
      }
    },
    {
      "segment_id": "782c902a",
      "source_content": "### Setup SAML Jackson",
      "source_content_hash": "8dbe0621d592d23bc26b14e5d3d03a40b35ff72223b1a4ea44f54251a3574187",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 配置SAML Jackson"
      }
    },
    {
      "segment_id": "50746522",
      "source_content": "Setup the SAML Jackson to work with Express.js app.",
      "source_content_hash": "d5720761311b5937b1db5e30454006583d50ff01168e6b006fbdc4c6f10fd3d7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "配置SAML Jackson以适配Express.js应用。"
      }
    },
    {
      "segment_id": "45022e4f",
      "source_content": "```js title=\"jackson.js\"\nconst baseUrl = 'https://your-app.com';\nconst samlAudience = 'https://saml.boxyhq.com';\nconst product = 'saml-demo.boxyhq.com';\nconst samlPath = '/sso/acs';\nconst redirectUrl = `${baseUrl}/sso/callback`;\n\n// SAML Jackson options\nconst options = {\n  externalUrl: baseUrl,\n  samlAudience,\n  samlPath,\n  db: {\n    engine: 'sql',\n    type: 'postgres',\n    url: 'postgres://postgres:postgres@localhost:5432/postgres',\n  },\n};\n\nmodule.exports = {\n  baseUrl,\n  product,\n  samlPath,\n  redirectUrl,\n  samlAudience,\n  options,\n};\n```",
      "source_content_hash": "8aa5107fdefb79ce4afafda475868382a2dd5757f4d357455cc1d1a63919d122",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_45022e4f"
      }
    },
    {
      "segment_id": "eab056be",
      "source_content": "`samlPath` is where the identity provider POST the SAML response after authenticating the user and `redirectUrl` is where the SAML Jackson redirects the user after authentication.",
      "source_content_hash": "65f32f876645dea9a7b451fc8c608c995ea74e9bdb628896d9f75437af167f9f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`samlPath`是身份提供商认证用户后提交SAML响应的路径，`redirectUrl`是SAML Jackson认证完成后重定向用户的地址。"
      }
    },
    {
      "segment_id": "f01228d3",
      "source_content": "Initialize the SAML Jackson as below.",
      "source_content_hash": "32af9d1614a3f1d8565d4bc6bb928fd2fd0522d44f506e69b7cf54959fadffbc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "按以下方式初始化SAML Jackson："
      }
    },
    {
      "segment_id": "afa378f7",
      "source_content": "Please note that the initialization of `@boxyhq/saml-jackson` is async. Therefore, you cannot run it at the top level. Instead, run this in a function where you initialize the express server.",
      "source_content_hash": "05a2a2f987e1261dccd1350e45c69faf3b392a235966d0d17fdc1a4c259f2745",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "请注意`@boxyhq/saml-jackson`的初始化是异步操作，因此不能在顶层直接调用。应在初始化express服务器的函数中执行。"
      }
    },
    {
      "segment_id": "a89f84e1",
      "source_content": "```js title=\"routes/index.js\"\nconst { options, product, redirectUrl } = require('../jackson');\n\nlet apiController;\nlet oauthController;\n\n(async function init() {\n  const jackson = await require('@boxyhq/saml-jackson').controllers(options);\n\n  apiController = jackson.connectionAPIController;\n  oauthController = jackson.oauthController;\n})();\n```",
      "source_content_hash": "14d61d1d494fdf67a1192fcde88cc92b1e96e256b5089a4cab96a9cb825c2b01",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_a89f84e1"
      }
    },
    {
      "segment_id": "39db08de",
      "source_content": "### Make Authentication Request",
      "source_content_hash": "183248edcdad61d66651eee6f50bd53b3e36cb15c69d07c5b5f5cb3ef9d59611",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 发起认证请求"
      }
    },
    {
      "segment_id": "785750ac",
      "source_content": "Let's add a route to begin the authenticate flow; this route initiates the SAML SSO flow by redirecting the users to their configured Identity Provider.",
      "source_content_hash": "9f1a5a74765e0342025b8d3abead331db85a4586cd51c6fc90a1dec8fa6e055e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "添加路由以启动认证流程：该路由通过将用户重定向至其配置的身份提供商来发起SAML单点登录流程。"
      }
    },
    {
      "segment_id": "42626972",
      "source_content": "<Tabs>\n<TabItem value=\"01\" label=\"With Tenant and Product\" default>\n\n```js title=\"/routes/index.js\"\nrouter.post('/sso', async (req, res, next) => {\n  const tenant = 'boxyhq.com'; // The user's tenant\n\n  const { redirect_url } = await oauthController.authorize({\n    tenant,\n    product,\n    state: 'a-random-state-value',\n    redirect_uri: redirectUrl,\n  });\n\n  res.redirect(redirect_url);\n});\n```\n\n</TabItem>\n\n<TabItem value=\"02\" label=\"With Client ID\">\n\n```js title=\"/routes/index.js\"\nrouter.post('/sso', async (req, res, next) => {\n  const clientId = '123456789'; // The tenant's client ID\n\n  const { redirect_url } = await oauthController.authorize({\n    client_id: clientId,\n    state: 'a-random-state-value', // You can use the `state` parameter to restore application state between redirects.\n    redirect_uri: redirectUrl,\n  });\n\n  res.redirect(redirect_url);\n});\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "bf064f8ca0f1388710c9301f8d39707db5856b616508f63cbacf606d639ae2be",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_42626972"
      }
    },
    {
      "segment_id": "c83259bb",
      "source_content": "### Receives SAML Response",
      "source_content_hash": "912543b3a2cadb8fbe7efd3eaf46ead5479703a4751c9f002fc73bc2b7e11e1e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 接收SAML响应"
      }
    },
    {
      "segment_id": "14bc6b75",
      "source_content": "After successful authentication, Identity Provider POST the SAML response to the Assertion Consumer Service (ACS) URL.",
      "source_content_hash": "0f016308541eb26f22085f0c41690fd5a0187723fc099aa59b0b395be0c83db2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "认证成功后，身份提供商将SAML响应以POST方式提交至断言消费者服务(ACS) URL。"
      }
    },
    {
      "segment_id": "e478ec2c",
      "source_content": "Let's add a route to handle the SAML response. Ensure the route matches the value of the `samlPath` you configured while initializing the SAML Jackson library and should be able to receives POST request.",
      "source_content_hash": "caecd06d8dffbcaa8350297eaa52555518916b5bde96b2235660a5a0f4b11824",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "添加路由来处理SAML响应。确保该路由与初始化SAML Jackson库时配置的`samlPath`值匹配，且能接收POST请求。"
      }
    },
    {
      "segment_id": "e908327f",
      "source_content": "```js title=\"/routes/index.js\"\nrouter.post('/sso/acs', async (req, res, next) => {\n  const { RelayState, SAMLResponse } = req.body;\n\n  const { redirect_url } = await oauthController.samlResponse({\n    RelayState,\n    SAMLResponse,\n  });\n\n  res.redirect(redirect_url);\n});\n```",
      "source_content_hash": "ca900d3cf03b1c8575eebfdabbdbf398c7ba67bec40dbe25c885a1dd5166cd24",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_e908327f"
      }
    },
    {
      "segment_id": "55dc794c",
      "source_content": "### Request Access Token",
      "source_content_hash": "61c0c6a2ba0c4a1c52c6019a99c59ebd8e61cb9992ba14a109cf9475d4667001",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 请求访问令牌"
      }
    },
    {
      "segment_id": "63565425",
      "source_content": "Let's add another route for receiving the callback after the authentication. Ensure the route matches the value of the `redirectUrl` you configured previously.",
      "source_content_hash": "6c3afe707543704766f2d5a0d45eacb67d6eb2c7d447d0066cb7de2c224cd213",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "添加另一个路由用于接收认证后的回调。确保该路由与先前配置的`redirectUrl`值匹配。"
      }
    },
    {
      "segment_id": "1496ef51",
      "source_content": "The application requests an `access_token` by passing the authorization `code` along with authentication details, including the `client_id`, `client_secret`, and `redirect_uri`.",
      "source_content_hash": "4af0b6627b5f2d80ebae6dea0c7f543c2905faffb309b382dd07f8a01fc907cf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "应用通过传递授权`code`及认证信息（包括`client_id`、`client_secret`和`redirect_uri`）来请求`access_token`。"
      }
    },
    {
      "segment_id": "af12710d",
      "source_content": "<Tabs>\n<TabItem value=\"01\" label=\"With Tenant and Product\" default>\n\n```js title=\"/routes/index.js\"\nrouter.get('/sso/callback', async (req, res, next) => {\n  const { code, state } = req.query;\n\n  const tenant = 'boxyhq.com'; // The user's tenant\n  const product = 'saml-demo.boxyhq.com'; // Your app or product name\n\n  const clientId = `tenant=${tenant}&product=${product}`;\n  const clientSecret = 'dummy';\n\n  // Exchange the `code` for `access_token`\n  const { access_token } = await oauthController.token({\n    code,\n    client_id: clientId,\n    client_secret: clientSecret,\n    redirect_uri: redirectUrl,\n  });\n});\n```\n\n</TabItem>\n\n<TabItem value=\"02\" label=\"With Client ID\">\n\n```js title=\"/routes/index.js\"\nrouter.get('/sso/callback', async (req, res, next) => {\n  const { code, state } = req.query;\n\n  const clientId = '123456789'; // The tenant's client ID\n  const clientSecret = 'dUdSOmGoxr'; // The tenant's client Secret\n\n  // Exchange the `code` for `access_token`\n  const { access_token } = await oauthController.token({\n    code,\n    client_id: clientId,\n    client_secret: clientSecret,\n    redirect_uri: redirectUrl,\n  });\n});\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "a9a5ea4a7dac8230f47ab98fd190f0cec9258789f9a1b9d058036b041ceb42f2",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_af12710d"
      }
    },
    {
      "segment_id": "778e087a",
      "source_content": "### Fetch User Profile",
      "source_content_hash": "0d72a4b900175fa6282dd8c47065fb455899ffcce076af4f0bc76a1efc02428f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 获取用户资料"
      }
    },
    {
      "segment_id": "90c4b96b",
      "source_content": "Once the `access_token` has been fetched, you can use it to retrieve the user profile from the Identity Provider. The `userInfo` method returns a response containing the user profile if the authorization is valid.",
      "source_content_hash": "30919e133caceaf71f4f549bb4d026d999e95b13255dadc9f57003382030806e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "获取`access_token`后，可用其从身份提供商检索用户资料。若授权有效，`userInfo`方法将返回包含用户资料的响应。"
      }
    },
    {
      "segment_id": "f377fafa",
      "source_content": "```js\nconst user = await oauthController.userInfo(access_token);\n```",
      "source_content_hash": "edf86f8f42674dafafb8d9fb260e0e1d7ff9b74235981e85d2960dd7d44c0f6c",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_f377fafa"
      }
    },
    {
      "segment_id": "09f901c3",
      "source_content": "The entire response will look something like this:",
      "source_content_hash": "24c284ebbb7472c2f05e9a9ae60848133d4cf840ea0df484e4de99af4fed3c13",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "完整响应示例如下："
      }
    },
    {
      "segment_id": "ca792546",
      "source_content": "```json\n{\n  \"id\":\"<id from the Identity Provider>\",\n  \"email\": \"jackson@coolstartup.com\",\n  \"firstName\": \"SAML\",\n  \"lastName\": \"Jackson\",\n  \"requested\": {\n    \"tenant\": \"<tenant>\",\n    \"product\": \"<product>\",\n    \"client_id\": \"<client_id>\",\n    \"state\": \"<state>\"\n  },\n  \"raw\": {\n    ...\n  }\n}\n```",
      "source_content_hash": "5aa1ce4635b3013ee315ac9ced87b396208cd8f8cec45142c40c58d9c33138cd",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_ca792546"
      }
    },
    {
      "segment_id": "f210f942",
      "source_content": "### Authenticate User",
      "source_content_hash": "0d068b485e5f9269baec72bdc4311c36a12b3266c4a631444dfa62a23d6c8350",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 用户认证"
      }
    },
    {
      "segment_id": "2dbbb313",
      "source_content": "Once the user has been retrieved from the Identity Provider, you may determine if the user exists in your application and authenticate the user. If the user does not exist in your application, you will typically create a new record in your database to represent the user.",
      "source_content_hash": "a524473dc4cf8bceb72976ed06072a8c8da9a82f1bc67f4fb86a7d6c9648b1af",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "当从身份提供商处获取到用户信息后，您需要判断该用户是否已存在于应用程序中并进行认证。若用户不存在，通常需要在数据库中创建新记录来存储该用户信息。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs-guides/current/jackson/frameworks/express.md",
  "last_updated_timestamp": "2025-06-08T18:49:09.286862+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "719d91706baa2ee18069388047a5ddb44e6587a5a95cdf8214a46c21a2b28d87"
  }
}